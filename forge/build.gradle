plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.realrobotix.me/master" }
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
}

dependencies {
    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Dependencies
    modImplementation(include("com.tterrag.registrate:Registrate:${registrate_forge_version}"))

    // Compatibilities
    modCompileOnly("com.rbasamoyai:createbigcannons-forge-${minecraft_version}:${cbc_version}") { transitive = false }
    modCompileOnly("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modCompileOnly("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_forge_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))

    // Test Compatibilities
//    modLocalRuntime("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
//    // Ensure flywheel is included in runtime when running with create
//    modLocalRuntime("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
//    modLocalRuntime("com.rbasamoyai:createbigcannons-forge-${minecraft_version}:${cbc_version}") { transitive = false }

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
        "version", version,
        "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
        "minecraft_version", minecraft_version,
        "create_version", create_forge_version.split("-")[0] // cut off build number
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

loom {
    forge {
        mixinConfig(
            "reclaim-common.mixins.json",
            "reclaim.mixins.json"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
